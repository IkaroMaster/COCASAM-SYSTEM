using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using CapaNegocio;
using CapaEntidad;
using CapaPresentacion.Formularios;

namespace CapaPresentacion.Formularios
{
    public partial class FrmProductor : DevExpress.XtraEditors.XtraForm
    {
        public FrmProductor()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            sexoTableAdapter1.Fill(cafeDBDataSet1.Sexo);
        }

        private Boolean Validar()
        {
            if (String.IsNullOrEmpty(txtIdProductor.EditValue.ToString().Trim()))
            {
                txtIdProductor.ErrorText = "Ingrese el codigo del productor";
                return false;
            }
            if (String.IsNullOrEmpty(txtNombreProductor.EditValue.ToString().Trim()))
            {
                txtNombreProductor.ErrorText = "Ingrese el nombre del productor";
                return false;
            }
            if (String.IsNullOrEmpty(txtApellidoProductor.EditValue.ToString().Trim()))
            {
                txtApellidoProductor.ErrorText = "Ingrese el Apellido del productor";
                return false;
            }
            if (lueSexo.EditValue == null)
            {
                lueSexo.ErrorText = "Seleccione el sexo del productor";
                return false;
            }

            

            return true;
            
        }

        private void Limpiar()
        {
            txtIdProductor.EditValue = "";
            txtNombreProductor.EditValue = "";
            txtApellidoProductor.EditValue = "";
            lueSexo.EditValue = null;
            slueLugar.EditValue = null;
            dgvLugar.DataSource = "";

        }

        private void LlenarComboSexo()
        {
            CNProductor objP = new CNProductor();
            lueSexo.Properties.DataSource = objP.ListadoSexo().Tables["Sexo"];
        }

        private void LlenarComboLugar()
        {
            CNLugar objP = new CNLugar();
            slueLugar.Properties.DataSource = objP.ListadoLugar().Tables["Lugar"];
        }

        private void ListadoProductor()
        {
            CNProductor objP = new CNProductor();
            gcDatosProductor.DataSource = objP.ListadoProductor().Tables["Productor"];
        }

        private void HabilitarControles(Boolean nuevo, Boolean guardar, Boolean actualizar, Boolean cancelar,Boolean regresar,Boolean datos,Boolean grid)
        {
            pbxNuevo.Enabled = nuevo;
            pbxGuardar.Enabled = guardar;
            pbxActualizar.Enabled = actualizar;
            pbxCancelar.Enabled = cancelar;
            pbxRegresar.Enabled = regresar;
            gBxDatos.Enabled = datos;
            gcDatosProductor.Enabled = grid;
            gBoxLugar.Enabled = datos;
            
        }

        private void pbxGuardar_Click(object sender, EventArgs e)
        {
            this.Validar();
            if (Validar())
            {
                
                CNProductor objGuardarProductor = new CNProductor();
                CEProductor objProductor = new CEProductor()
                {
                    IdProductor = txtIdProductor.Text.Trim(),
                    Nombre = txtNombreProductor.Text.Trim(),
                    Apellido = txtApellidoProductor.Text.Trim(),
                    IdSexo = int.Parse(lueSexo.EditValue.ToString()),
                    Socio = chkSocio.Checked
                };

                if (objGuardarProductor.NuevoProductor(objProductor) > 0 )
                {
                    

                    if (GuardarLugares())
                    {
                        Limpiar();
                        ListadoProductor();
                        HabilitarControles(true, false, false, false, true,false,true);
                        XtraMessageBox.Show("Registro almacenado satisfatoriamente", "COCASAM", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
                

            }
        }

        private void FrmProductor_Load(object sender, EventArgs e)
        {
            // TODO: esta línea de código carga datos en la tabla 'cafeDBDataSet.Sexo' Puede moverla o quitarla según sea necesario.
            this.sexoTableAdapter.Fill(this.cafeDBDataSet.Sexo);
            // TODO: esta línea de código carga datos en la tabla 'cafeDBDataSet11.Sexo' Puede moverla o quitarla según sea necesario.
            this.sexoTableAdapter2.Fill(this.cafeDBDataSet11.Sexo);
            // TODO: esta línea de código carga datos en la tabla 'cafeDBDataSet.Sexo' Puede moverla o quitarla según sea necesario.
            this.sexoTableAdapter.Fill(this.cafeDBDataSet.Sexo);
            Limpiar();
            LlenarComboSexo();
            LlenarComboLugar();
            ListadoProductor();
            HabilitarControles(true, false, false, false, true,false,true);
            MostrarLugarXProductor("cc000");

            


        }

        private void EliminarLugarXProductor(String idProductor)
        {
            CNProductor objEliminarProductor = new CNProductor();
            
            CEProductor objProductor = new CEProductor()
            {
                IdProductor = idProductor
            };

            if (objEliminarProductor.EliminarLugarXProductor(objProductor) > 0)
            {
                ListadoProductor();
               // XtraMessageBox.Show("Registro lugares Eliminado Satisfactoriamente", "COCASAM", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
               // XtraMessageBox.Show("Error al Eliminar el Registro", "COCASAM", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void eliminarStripMenuItem1_Click(object sender, EventArgs e)
        {
            
            CNProductor objEliminarProductor = new CNProductor();
            String idProductor = gvDatosProductor.GetRowCellValue(gvDatosProductor.FocusedRowHandle, colIdProductor).ToString();

            EliminarLugarXProductor(idProductor);

            CEProductor objProductor = new CEProductor()
            {
                IdProductor = idProductor
            };

            if (objEliminarProductor.EliminarProductor(objProductor) > 0)
            {
                ListadoProductor();
                XtraMessageBox.Show("Registro Eliminado Satisfactoriamente", "COCASAM", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                XtraMessageBox.Show("Error al Eliminar el Registro", "COCASAM", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void pbxActualizar_Click(object sender, EventArgs e)
        {
           
            this.Validate();
            if (Validar())
            {
                String idProductor = txtIdProductor.Text.Trim();
                EliminarLugarXProductor(idProductor);
                GuardarLugares();
                CNProductor objActualizarProductor = new CNProductor();
                CEProductor objProductor = new CEProductor()
                {
                    IdProductor = txtIdProductor.Text.Trim(),
                    Nombre = txtNombreProductor.Text.Trim(),
                    Apellido = txtApellidoProductor.Text.Trim(),
                    IdSexo = int.Parse(lueSexo.EditValue.ToString()),
                    Socio = chkSocio.Checked
                };

                if (objActualizarProductor.ActualizarProductor(objProductor) > 0)
                {
                    Limpiar();
                    HabilitarControles(true, false, false, false,true,false,true);
                    ListadoProductor();
                    XtraMessageBox.Show("Registro Actualizado Satisfactoriamente", "COCASAM", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    XtraMessageBox.Show("Error al Actualizar el Registro", "COCASAM", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }


        private void editarStripMenuItem1_Click(object sender, EventArgs e)
        {
            String id = gvDatosProductor.GetRowCellValue(gvDatosProductor.FocusedRowHandle, colIdProductor).ToString();

            MostrarProductor(id);
            HabilitarControles(false, false, true, true, false,true,false);

            MostrarLugarXProductor(id);
            
        }

        public void MostrarLugarXProductor(String IdProductor)
        {
            dgvLugar.AutoGenerateColumns = false;
            CNProductor objP = new CNProductor();
            dgvLugar.DataSource = objP.ListarLugarXProductor(IdProductor).Tables["Productor"];
            //slueLugar.Properties.DataSource = objP.ListarLugarXProductor(IdProductor).Tables["Lugar"];

            //CNProductor objObtenerProductor = new CNProductor();
            //CEProductor objP = objObtenerProductor.ObtenerLugarXProductor(IdProductor.Trim());

            ////DataTable dt = objP.IdLugar;
            //dgvLugar.Rows.Add(objP);

        }

        public void MostrarProductor(String IdProductor)
        {
            CNProductor objObtenerProductor = new CNProductor();
            CEProductor objP = objObtenerProductor.ObtenerProductor(IdProductor.Trim());

            txtIdProductor.EditValue = objP.IdProductor.Trim();
            txtNombreProductor.EditValue = objP.Nombre.Trim();
            txtApellidoProductor.EditValue = objP.Apellido.Trim();
            lueSexo.EditValue = objP.IdSexo;
            chkSocio.Checked = objP.Socio;
        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }

        private void btnAgregarLugar_Click(object sender, EventArgs e)
        {

            

        }

        private void eliminarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (dgvLugar.Rows.Count > 0)
            {
                dgvLugar.Rows.Remove(dgvLugar.CurrentRow);
            }
        }

        private Boolean GuardarLugares()
        {
            
            if (dgvLugar.Rows.Count > 0)
            {
                CNProductor objGuardarProductorXLugar = new CNProductor();
                foreach (DataGridViewRow item in dgvLugar.Rows)
                {
                    CEProductor objProductor = new CEProductor()
                    {
                        IdProductor = txtIdProductor.Text.Trim(),
                        IdLugar = int.Parse(Convert.ToString(item.Cells["colIdLugar"].Value))

                    };

                    if (objGuardarProductorXLugar.NuevoProductorXLugar(objProductor) > 0)
                    {
                    }
                    else
                    {
                        XtraMessageBox.Show("No se ha logrado almacenar los lugares del productor", "COCASAM", MessageBoxButtons.OK, MessageBoxIcon.Error);

                        return false;
                    }
                }

                return true;


            }
           
                return true;
         

        }

        private void slueLugar_EditValueChanged(object sender, EventArgs e)
        {

            if (slueLugar.EditValue == null || slueLugar.EditValue.ToString() == "")
            {
               // slueLugar.ErrorText = "Seleccione un lugar para agregarlo a la lista de lugares de produccion";
            }
            else
            {


                bool existe = dgvLugar.Rows.Cast<DataGridViewRow>().Any(row => Convert.ToString(row.Cells["colIdLugar"].Value) == slueLugar.EditValue.ToString());

                if (!existe )
                {
                    ////Agregar las Filas al DataRow y asignar el valor correspondiente. 
                    //DataTable dt = new DataTable();
                    //dt = dgvLugar.DataSource as DataTable;

                    //DataRow datarow;
                    //datarow = dt.NewRow(); //Con esto le indica que es una nueva fila.

                    //datarow["IdLugar"] = int.Parse(slueLugar.EditValue.ToString());
                    //datarow["Lugar"] = slueLugar.Text;


                    ////Esto se encargará de agregar la fila.
                    //dt.Rows.Add(datarow);


                    DataTable data = (DataTable)(dgvLugar.DataSource);
                    DataRow datarow;
                    datarow = data.NewRow(); //Con esto le indica que es una nueva fila.

                    datarow["IdLugar"] = int.Parse(slueLugar.EditValue.ToString());
                    datarow["Lugar"] = slueLugar.Text;
                    //Esto se encargará de agregar la fila.
                    data.Rows.Add(datarow);
                    //dgvLugar[0].DataSource = data;
                    
                }
                //else
                //if (!existe && pbxGuardar.Enabled == true)
                //{


                //    // Add the row to the rows collection. 
                //    //table.Rows.Add(newRow);

                //    int id = int.Parse(slueLugar.EditValue.ToString());
                //    string lugar = slueLugar.Text;
                //    dgvLugar.Rows.Add(id, lugar);
                //    slueLugar.EditValue = null;

                //}

            }

        }

        private void pbxNuevo_Click(object sender, EventArgs e)
        {
            HabilitarControles(false, true, false, true, false,true,false);
            MostrarLugarXProductor("cc000");
        }

        private void contextMenuStrip1_Opening(object sender, CancelEventArgs e)
        {

        }
    }
}
